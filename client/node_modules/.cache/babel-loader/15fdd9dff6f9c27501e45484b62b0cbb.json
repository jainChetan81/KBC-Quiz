{"ast":null,"code":"var _jsxFileName = \"/media/chetan/New Volume/Pdhai/Projects/kbc-quiz/src/views/Quiz.jsx\";\nimport React, { Component } from \"react\";\nimport questions from \"../data/questions\";\nexport default class Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questionCout: 0,\n      questions: [...questions],\n      finished: false,\n      answeredQuestion: [],\n      totalMarks: 0\n    };\n  }\n\n  prev() {\n    const _this$state = this.state,\n          questionCout = _this$state.questionCout,\n          questions = _this$state.questions,\n          answeredQuestion = _this$state.answeredQuestion;\n\n    if (questions[questionCout].answerCorrect && questions[questionCout].answerCorrect === answeredQuestion[questionCout]) {\n      console.log(\"answered question  \", answeredQuestion[questionCout]);\n    }\n\n    if (questionCout > 0) {\n      this.setState({\n        questionCout: this.state.questionCout - 1,\n        finished: false\n      });\n    } else {\n      this.setState({\n        questionCout: 0,\n        finished: true\n      });\n    }\n  }\n\n  click(given, answer) {\n    const i = this.state.i;\n    var joined = this.state.answeredQuestion.concat(answer);\n    this.setState({\n      answeredQuestion: joined\n    });\n\n    if (given === answer) {\n      this.setState({\n        totalMarks: this.state.totalMarks + 1\n      });\n    }\n\n    if (i < 1) {\n      console.log(answer, i, \"i<1\");\n      this.setState({\n        i: i + 1\n      });\n    } else {\n      console.log(answer, i, \"else\");\n      this.setState({\n        finished: true\n      });\n    }\n\n    console.log(\"i i=======\", this.state.i);\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          i = _this$state2.i,\n          questions = _this$state2.questions,\n          finished = _this$state2.finished,\n          totalMarks = _this$state2.totalMarks,\n          answeredQuestion = _this$state2.answeredQuestion;\n    var answered = true;\n    const prevButton = React.createElement(\"button\", {\n      className: \"btn col\",\n      onClick: () => {\n        this.prev(true);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"lead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"prev\"));\n    if (finished) return React.createElement(\"h1\", {\n      className: \"text-center m-5 text-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, prevButton, \"Quiz is finished \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), \"Your answer being \", totalMarks);\n\n    if (i < 0) {\n      return React.createElement(\"h1\", {\n        className: \"text-center m-5 text-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, prevButton, \"Lets start the quiz\", \" \", React.createElement(\"button\", {\n        className: \"btn btn-primary border\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"NOW\"), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), \"}\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"bg-primary text-black text-capitalize m-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, prevButton, questions[i].questionno), React.createElement(\"div\", {\n      className: \"bg-success row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, questions[i].options.map(value => {\n      return React.createElement(\"button\", {\n        className: \"btn col\",\n        key: value.key,\n        disabled: answered ? false : true,\n        onClick: () => {\n          this.click(value.key, questions[i].answerCorrect);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"lead\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, value.ques));\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/media/chetan/New Volume/Pdhai/Projects/kbc-quiz/src/views/Quiz.jsx"],"names":["React","Component","questions","Quiz","state","questionCout","finished","answeredQuestion","totalMarks","prev","answerCorrect","console","log","setState","click","given","answer","i","joined","concat","render","answered","prevButton","questionno","options","map","value","key","ques"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport questions from \"../data/questions\";\r\nexport default class Quiz extends Component {\r\n    state = {\r\n        questionCout: 0,\r\n        questions: [...questions],\r\n        finished: false,\r\n        answeredQuestion: [],\r\n        totalMarks: 0\r\n    };\r\n    prev() {\r\n        const { questionCout, questions, answeredQuestion } = this.state;\r\n        if (\r\n            questions[questionCout].answerCorrect &&\r\n            questions[questionCout].answerCorrect === answeredQuestion[questionCout]\r\n        ) {\r\n            console.log(\"answered question  \", answeredQuestion[questionCout]);\r\n        }\r\n        if (questionCout > 0) {\r\n            this.setState({\r\n                questionCout: this.state.questionCout - 1,\r\n                finished: false\r\n            });\r\n        } else {\r\n            this.setState({\r\n                questionCout: 0,\r\n                finished: true\r\n            });\r\n        }\r\n    }\r\n    click(given, answer) {\r\n        const { i } = this.state;\r\n        var joined = this.state.answeredQuestion.concat(answer);\r\n        this.setState({ answeredQuestion: joined });\r\n        if (given === answer) {\r\n            this.setState({\r\n                totalMarks: this.state.totalMarks + 1\r\n            });\r\n        }\r\n        if (i < 1) {\r\n            console.log(answer, i, \"i<1\");\r\n            this.setState({\r\n                i: i + 1\r\n            });\r\n        } else {\r\n            console.log(answer, i, \"else\");\r\n            this.setState({\r\n                finished: true\r\n            });\r\n        }\r\n        console.log(\"i i=======\", this.state.i);\r\n    }\r\n    render() {\r\n        const {\r\n            i,\r\n            questions,\r\n            finished,\r\n            totalMarks,\r\n            answeredQuestion\r\n        } = this.state;\r\n        var answered = true;\r\n        const prevButton = (\r\n            <button\r\n                className=\"btn col\"\r\n                onClick={() => {\r\n                    this.prev(true);\r\n                }}\r\n            >\r\n                <p className=\"lead\">prev</p>\r\n            </button>\r\n        );\r\n\r\n        if (finished)\r\n            return (\r\n                <h1 className=\"text-center m-5 text-primary\">\r\n                    {prevButton}\r\n                    Quiz is finished <br />\r\n                    Your answer being {totalMarks}\r\n                </h1>\r\n            );\r\n        if (i < 0) {\r\n            return (\r\n                <h1 className=\"text-center m-5 text-primary\">\r\n                    {prevButton}\r\n                    Lets start the quiz{\" \"}\r\n                    <button className=\"btn btn-primary border\">NOW</button>{\" \"}\r\n                    <br />}\r\n                </h1>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"col\">\r\n                    <div className=\"container\">\r\n                        <h2 className=\"bg-primary text-black text-capitalize m-auto\">\r\n                            {prevButton}\r\n                            {questions[i].questionno}\r\n                        </h2>\r\n                        <div className=\"bg-success row\">\r\n                            {questions[i].options.map(value => {\r\n                                return (\r\n                                    <button\r\n                                        className=\"btn col\"\r\n                                        key={value.key}\r\n                                        disabled={answered ? false : true}\r\n                                        onClick={() => {\r\n                                            this.click(\r\n                                                value.key,\r\n                                                questions[i].answerCorrect\r\n                                            );\r\n                                        }}\r\n                                    >\r\n                                        <p className=\"lead\">{value.ques}</p>\r\n                                    </button>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}