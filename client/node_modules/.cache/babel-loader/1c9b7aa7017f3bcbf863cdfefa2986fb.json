{"ast":null,"code":"var _jsxFileName = \"/media/chetan/New Volume/Pdhai/Projects/kbc-quiz/src/views/Quiz.jsx\";\nimport React, { Component } from \"react\";\nimport questions from \"../data/questions\";\nimport { Link } from \"react-router-dom\";\nimport \"./Quiz.css\";\nexport default class Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      qCount: 0,\n      ques: [...questions],\n      finished: false,\n      givenAns: [],\n      total: 0\n    };\n  }\n\n  previusButton(id) {\n    if (id === 0) {\n      if (this.state.qCount === 0) {\n        return React.createElement(Link, {\n          className: \"btn col-2 btn-danger py-3\",\n          to: \"/\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17\n          },\n          __self: this\n        }, \"Home\");\n      }\n\n      return React.createElement(\"button\", {\n        className: \"btn col-2 btn-danger py-3\",\n        onClick: e => {\n          e.preventDefault();\n          this.prev(true);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"Prev\");\n    }\n\n    return React.createElement(\"button\", {\n      className: \"btn col-2 btn-danger py-3\",\n      onClick: e => {\n        e.preventDefault();\n        this.next(true);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, this.state.qCount === this.state.ques.length - 1 ? \"Finish\" : \"Next\");\n  }\n\n  getClassName(value) {\n    const {\n      qCount,\n      givenAns,\n      ques\n    } = this.state;\n\n    if (givenAns[qCount]) {\n      const correctanswer = ques[qCount].answerCorrect;\n\n      if (givenAns[qCount] === correctanswer && correctanswer === value.key //todo: so that the answer given and the correct answer and the returned are all equal\n      ) {\n          return React.createElement(\"button\", {\n            key: value.key,\n            className: \"col-md-6 col-sm-12 btn btn-primary disabled m-1 mx-auto\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            className: \"lead p-auto text-dark mt-2 text-center\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62\n            },\n            __self: this\n          }, React.createElement(\"b\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63\n            },\n            __self: this\n          }, value.ques)));\n        } else if (correctanswer === value.key //todo: so that the correct answer is marked along\n      ) {\n          return React.createElement(\"button\", {\n            key: value.key,\n            className: \"col-md-6 col-sm-12 btn btn-success disabled m-1 mx-auto\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            className: \"lead p-auto text-dark mt-2 text-center\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75\n            },\n            __self: this\n          }, React.createElement(\"b\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76\n            },\n            __self: this\n          }, value.ques)));\n        }\n\n      return React.createElement(\"button\", {\n        key: value.key,\n        className: \"btn col-md-6 col-sm-12  btn-light disabled m-1 mx-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"lead p-auto text-dark mt-2 text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, value.ques)));\n    }\n\n    return React.createElement(\"button\", {\n      key: value.key,\n      className: \"btn col-md-6 col-sm-12  btn-light m-1 mx-auto\",\n      onClick: () => {\n        this.click(value.key, ques[qCount].answerCorrect);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"lead p-auto text-dark mt-2 text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, value.ques)));\n  }\n\n  next() {\n    let count = this.state.qCount;\n\n    if (!this.state.givenAns[count]) {\n      var joined = this.state.givenAns.concat(-1);\n      this.setState({\n        givenAns: joined\n      }); //todo:to add nothing in case of answered passed\n\n      console.log(this.state.givenAns);\n    }\n\n    count = count + 1;\n    console.log(\"the count in next menu is :\", count);\n\n    if (count > -1 && count < this.state.ques.length) {\n      this.setState({\n        finished: false\n      });\n    }\n\n    if (count === this.state.ques.length) {\n      this.setState({\n        finished: true\n      });\n    }\n\n    this.setState({\n      qCount: count\n    });\n  }\n\n  prev() {\n    let count = this.state.qCount;\n    count = count - 1;\n    console.log(\"the count in prev menu is :\", count);\n\n    if (count > -1 && count < this.state.ques.length) {\n      this.setState({\n        finished: false\n      });\n    }\n\n    if (count === -1) {\n      this.setState({\n        finished: true\n      });\n    }\n\n    this.setState({\n      qCount: count\n    });\n  }\n\n  click(quesKey, actualAns) {\n    //todo:the quesKey == given answer and actualAns == correct\n    let count = this.state.qCount;\n    count = count + 1;\n    var joined = this.state.givenAns.concat(quesKey);\n    this.setState({\n      givenAns: joined\n    }); //todo:to add ht e list of ques answered\n\n    if (quesKey === actualAns) {\n      this.setState({\n        total: this.state.total + 1\n      });\n    }\n\n    if (count === this.state.ques.length) {\n      console.log(\"answer :\", quesKey, \"qcount:\", count, \"else\");\n      this.setState({\n        finished: true\n      });\n    }\n\n    this.setState({\n      qCount: count\n    });\n    console.log(\"joined:\", joined, \"  given ans:\", this.state.givenAns); //todo : adding the given answer to array of answers\n\n    console.log(\" qCount=====\", this.state.qCount);\n  }\n\n  render() {\n    const {\n      qCount,\n      ques,\n      finished,\n      total\n    } = this.state;\n    if (finished) return React.createElement(\"div\", {\n      className: \"text-center m-5 text-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => {\n        console.log(\"given ans:\", this.state.givenAns);\n      },\n      className: \"btn btn-success p-auto mx-5 my-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Retry\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), \" \", React.createElement(\"div\", {\n      className: \"text-black text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, this.previusButton(0)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Quiz is finished \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), \"Your answer being \", total));\n    return React.createElement(\"div\", {\n      className: \"box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-black text-center my-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, this.previusButton(0), React.createElement(\"h2\", {\n      className: \"text-center m-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, ques[qCount].questionno), this.previusButton(1)), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, ques[qCount].options.map(value => {\n      return this.getClassName(value);\n    })))), React.createElement(\"p\", {\n      className: \"lead text-center text-dark m-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"If the Color of Option in Previously aswered question is\", React.createElement(\"b\", {\n      className: \"text-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \" Blue\"), \" the it is the right answer otherwise if it is\", \" \", React.createElement(\"b\", {\n      className: \"text-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, \"Green\"), \" ,it is the wrong answer\"));\n  }\n\n}","map":{"version":3,"sources":["/media/chetan/New Volume/Pdhai/Projects/kbc-quiz/src/views/Quiz.jsx"],"names":["React","Component","questions","Link","Quiz","state","qCount","ques","finished","givenAns","total","previusButton","id","e","preventDefault","prev","next","length","getClassName","value","correctanswer","answerCorrect","key","click","count","joined","concat","setState","console","log","quesKey","actualAns","render","questionno","options","map"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport questions from \"../data/questions\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Quiz.css\";\r\nexport default class Quiz extends Component {\r\n    state = {\r\n        qCount: 0,\r\n        ques: [...questions],\r\n        finished: false,\r\n        givenAns: [],\r\n        total: 0\r\n    };\r\n    previusButton(id) {\r\n        if (id === 0) {\r\n            if (this.state.qCount === 0) {\r\n                return (\r\n                    <Link className=\"btn col-2 btn-danger py-3\" to=\"/\">\r\n                        Home\r\n                    </Link>\r\n                );\r\n            }\r\n            return (\r\n                <button\r\n                    className=\"btn col-2 btn-danger py-3\"\r\n                    onClick={e => {\r\n                        e.preventDefault();\r\n                        this.prev(true);\r\n                    }}\r\n                >\r\n                    Prev\r\n                </button>\r\n            );\r\n        }\r\n        return (\r\n            <button\r\n                className=\"btn col-2 btn-danger py-3\"\r\n                onClick={e => {\r\n                    e.preventDefault();\r\n                    this.next(true);\r\n                }}\r\n            >\r\n                {this.state.qCount === this.state.ques.length - 1\r\n                    ? \"Finish\"\r\n                    : \"Next\"}\r\n            </button>\r\n        );\r\n    }\r\n    getClassName(value) {\r\n        const { qCount, givenAns, ques } = this.state;\r\n        if (givenAns[qCount]) {\r\n            const correctanswer = ques[qCount].answerCorrect;\r\n\r\n            if (\r\n                givenAns[qCount] === correctanswer &&\r\n                correctanswer === value.key //todo: so that the answer given and the correct answer and the returned are all equal\r\n            ) {\r\n                return (\r\n                    <button\r\n                        key={value.key}\r\n                        className=\"col-md-6 col-sm-12 btn btn-primary disabled m-1 mx-auto\"\r\n                    >\r\n                        <p className=\"lead p-auto text-dark mt-2 text-center\">\r\n                            <b>{value.ques}</b>\r\n                        </p>\r\n                    </button>\r\n                );\r\n            } else if (\r\n                correctanswer === value.key //todo: so that the correct answer is marked along\r\n            ) {\r\n                return (\r\n                    <button\r\n                        key={value.key}\r\n                        className=\"col-md-6 col-sm-12 btn btn-success disabled m-1 mx-auto\"\r\n                    >\r\n                        <p className=\"lead p-auto text-dark mt-2 text-center\">\r\n                            <b>{value.ques}</b>\r\n                        </p>\r\n                    </button>\r\n                );\r\n            }\r\n            return (\r\n                <button\r\n                    key={value.key}\r\n                    className=\"btn col-md-6 col-sm-12  btn-light disabled m-1 mx-auto\"\r\n                >\r\n                    <p className=\"lead p-auto text-dark mt-2 text-center\">\r\n                        <b>{value.ques}</b>\r\n                    </p>\r\n                </button>\r\n            );\r\n        }\r\n        return (\r\n            <button\r\n                key={value.key}\r\n                className=\"btn col-md-6 col-sm-12  btn-light m-1 mx-auto\"\r\n                onClick={() => {\r\n                    this.click(value.key, ques[qCount].answerCorrect);\r\n                }}\r\n            >\r\n                <p className=\"lead p-auto text-dark mt-2 text-center\">\r\n                    <b>{value.ques}</b>\r\n                </p>\r\n            </button>\r\n        );\r\n    }\r\n    next() {\r\n        let count = this.state.qCount;\r\n        if (!this.state.givenAns[count]) {\r\n            var joined = this.state.givenAns.concat(-1);\r\n            this.setState({ givenAns: joined }); //todo:to add nothing in case of answered passed\r\n            console.log(this.state.givenAns);\r\n        }\r\n        count = count + 1;\r\n        console.log(\"the count in next menu is :\", count);\r\n        if (count > -1 && count < this.state.ques.length) {\r\n            this.setState({\r\n                finished: false\r\n            });\r\n        }\r\n        if (count === this.state.ques.length) {\r\n            this.setState({\r\n                finished: true\r\n            });\r\n        }\r\n        this.setState({\r\n            qCount: count\r\n        });\r\n    }\r\n    prev() {\r\n        let count = this.state.qCount;\r\n        count = count - 1;\r\n        console.log(\"the count in prev menu is :\", count);\r\n        if (count > -1 && count < this.state.ques.length) {\r\n            this.setState({\r\n                finished: false\r\n            });\r\n        }\r\n        if (count === -1) {\r\n            this.setState({\r\n                finished: true\r\n            });\r\n        }\r\n        this.setState({\r\n            qCount: count\r\n        });\r\n    }\r\n    click(quesKey, actualAns) {\r\n        //todo:the quesKey == given answer and actualAns == correct\r\n        let count = this.state.qCount;\r\n        count = count + 1;\r\n        var joined = this.state.givenAns.concat(quesKey);\r\n        this.setState({ givenAns: joined }); //todo:to add ht e list of ques answered\r\n        if (quesKey === actualAns) {\r\n            this.setState({\r\n                total: this.state.total + 1\r\n            });\r\n        }\r\n        if (count === this.state.ques.length) {\r\n            console.log(\"answer :\", quesKey, \"qcount:\", count, \"else\");\r\n            this.setState({\r\n                finished: true\r\n            });\r\n        }\r\n        this.setState({\r\n            qCount: count\r\n        });\r\n        console.log(\"joined:\", joined, \"  given ans:\", this.state.givenAns); //todo : adding the given answer to array of answers\r\n        console.log(\" qCount=====\", this.state.qCount);\r\n    }\r\n    render() {\r\n        const { qCount, ques, finished, total } = this.state;\r\n        if (finished)\r\n            return (\r\n                <div className=\"text-center m-5 text-primary\">\r\n                    <button\r\n                        onClick={() => {\r\n                            console.log(\"given ans:\", this.state.givenAns);\r\n                        }}\r\n                        className=\"btn btn-success p-auto mx-5 my-5\"\r\n                    >\r\n                        <Link to=\"/\">Retry</Link>\r\n                    </button>\r\n                    <br />{\" \"}\r\n                    <div className=\"text-black text-center\">\r\n                        {this.previusButton(0)}\r\n                    </div>\r\n                    <br />\r\n                    <h1>\r\n                        Quiz is finished <br />\r\n                        Your answer being {total}\r\n                    </h1>\r\n                </div>\r\n            );\r\n        return (\r\n            <div className=\"box\">\r\n                <div className=\"col\">\r\n                    <div className=\"container\">\r\n                        <div className=\"text-black text-center my-2\">\r\n                            {this.previusButton(0)}\r\n                            <h2 className=\"text-center m-3\">\r\n                                {ques[qCount].questionno}\r\n                            </h2>\r\n                            {this.previusButton(1)}\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            {ques[qCount].options.map(value => {\r\n                                return this.getClassName(value);\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <p className=\"lead text-center text-dark m-5\">\r\n                    If the Color of Option in Previously aswered question is\r\n                    <b className=\"text-primary\"> Blue</b> the it is the right\r\n                    answer otherwise if it is{\" \"}\r\n                    <b className=\"text-success\">Green</b> ,it is the wrong\r\n                    answer\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}