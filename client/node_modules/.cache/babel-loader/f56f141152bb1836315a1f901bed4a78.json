{"ast":null,"code":"var _jsxFileName = \"/media/chetan/New Volume/Pdhai/Projects/kbc-quiz/src/views/Quiz.jsx\";\nimport React, { Component } from \"react\";\nimport questions from \"../data/questions\";\nexport default class Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questionCount: 0,\n      questions: [...questions],\n      finished: false,\n      answeredQuestion: [],\n      totalMarks: 0\n    };\n  }\n\n  prev() {\n    const _this$state = this.state,\n          questionCount = _this$state.questionCount,\n          questions = _this$state.questions,\n          answeredQuestion = _this$state.answeredQuestion;\n\n    if (questions[questionCount].answerCorrect && questions[questionCount].answerCorrect === answeredQuestion[questionCount]) {\n      console.log(\"answered question  \", answeredQuestion[questionCount]);\n    }\n\n    if (questionCount > 0) {\n      this.setState({\n        questionCount: this.state.questionCount - 1,\n        finished: false\n      });\n    } else {\n      this.setState({\n        questionCount: 0,\n        finished: true\n      });\n    }\n  }\n\n  click(given, answer) {\n    const questionCount = this.state.questionCount;\n    var joined = this.state.answeredQuestion.concat(answer);\n    this.setState({\n      answeredQuestion: joined\n    });\n\n    if (given === answer) {\n      this.setState({\n        totalMarks: this.state.totalMarks + 1\n      });\n    }\n\n    if (questionCount < 1) {\n      console.log(answer, questionCount, \"questionCount<1\");\n      this.setState({\n        questionCount: questionCount + 1\n      });\n    } else {\n      console.log(answer, questionCount, \"else\");\n      this.setState({\n        finished: true\n      });\n    }\n\n    console.log(\"questionCount questionCount=======\", this.state.i);\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          questionCount = _this$state2.questionCount,\n          questions = _this$state2.questions,\n          finished = _this$state2.finished,\n          totalMarks = _this$state2.totalMarks;\n    var answered = true;\n    const prevButton = React.createElement(\"button\", {\n      className: \"btn col\",\n      onClick: () => {\n        this.prev(true);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"lead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"prev\"));\n    if (finished) return React.createElement(\"h1\", {\n      className: \"text-center m-5 text-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Home\")), \"Quiz is finished \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), \"Your answer being \", totalMarks);\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"bg-primary text-black text-capitalize m-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, prevButton, questions[questionCount].questionno), React.createElement(\"div\", {\n      className: \"bg-success row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, questions[questionCount].options.map(value => {\n      return React.createElement(\"button\", {\n        className: \"btn col\",\n        key: value.key,\n        disabled: answered ? false : true,\n        onClick: () => {\n          this.click(value.key, questions[questionCount].answerCorrect);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"lead\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, value.ques));\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/media/chetan/New Volume/Pdhai/Projects/kbc-quiz/src/views/Quiz.jsx"],"names":["React","Component","questions","Quiz","state","questionCount","finished","answeredQuestion","totalMarks","prev","answerCorrect","console","log","setState","click","given","answer","joined","concat","i","render","answered","prevButton","questionno","options","map","value","key","ques"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport questions from \"../data/questions\";\r\nexport default class Quiz extends Component {\r\n    state = {\r\n        questionCount: 0,\r\n        questions: [...questions],\r\n        finished: false,\r\n        answeredQuestion: [],\r\n        totalMarks: 0\r\n    };\r\n    prev() {\r\n        const { questionCount, questions, answeredQuestion } = this.state;\r\n        if (\r\n            questions[questionCount].answerCorrect &&\r\n            questions[questionCount].answerCorrect ===\r\n                answeredQuestion[questionCount]\r\n        ) {\r\n            console.log(\"answered question  \", answeredQuestion[questionCount]);\r\n        }\r\n        if (questionCount > 0) {\r\n            this.setState({\r\n                questionCount: this.state.questionCount - 1,\r\n                finished: false\r\n            });\r\n        } else {\r\n            this.setState({\r\n                questionCount: 0,\r\n                finished: true\r\n            });\r\n        }\r\n    }\r\n    click(given, answer) {\r\n        const { questionCount } = this.state;\r\n        var joined = this.state.answeredQuestion.concat(answer);\r\n        this.setState({ answeredQuestion: joined });\r\n        if (given === answer) {\r\n            this.setState({\r\n                totalMarks: this.state.totalMarks + 1\r\n            });\r\n        }\r\n        if (questionCount < 1) {\r\n            console.log(answer, questionCount, \"questionCount<1\");\r\n            this.setState({\r\n                questionCount: questionCount + 1\r\n            });\r\n        } else {\r\n            console.log(answer, questionCount, \"else\");\r\n            this.setState({\r\n                finished: true\r\n            });\r\n        }\r\n        console.log(\"questionCount questionCount=======\", this.state.i);\r\n    }\r\n    render() {\r\n        const { questionCount, questions, finished, totalMarks } = this.state;\r\n        var answered = true;\r\n        const prevButton = (\r\n            <button\r\n                className=\"btn col\"\r\n                onClick={() => {\r\n                    this.prev(true);\r\n                }}\r\n            >\r\n                <p className=\"lead\">prev</p>\r\n            </button>\r\n        );\r\n\r\n        if (finished)\r\n            return (\r\n                <h1 className=\"text-center m-5 text-primary\">\r\n                    <button className=\"btn btn-success\">\r\n                        <a href=\"/\">Home</a>\r\n                    </button>\r\n                    Quiz is finished <br />\r\n                    Your answer being {totalMarks}\r\n                </h1>\r\n            );\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"col\">\r\n                    <div className=\"container\">\r\n                        <h2 className=\"bg-primary text-black text-capitalize m-auto\">\r\n                            {prevButton}\r\n                            {questions[questionCount].questionno}\r\n                        </h2>\r\n                        <div className=\"bg-success row\">\r\n                            {questions[questionCount].options.map(value => {\r\n                                return (\r\n                                    <button\r\n                                        className=\"btn col\"\r\n                                        key={value.key}\r\n                                        disabled={answered ? false : true}\r\n                                        onClick={() => {\r\n                                            this.click(\r\n                                                value.key,\r\n                                                questions[questionCount]\r\n                                                    .answerCorrect\r\n                                            );\r\n                                        }}\r\n                                    >\r\n                                        <p className=\"lead\">{value.ques}</p>\r\n                                    </button>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}